import{s as c,B as U}from"./index-quXyQak6.js";import{p as a}from"./modal-Cd9qhBfX.js";const p="localhost:4000",E="ws";var n=(o=>(o.ERROR="ERROR",o.UserLogin="USER_LOGIN",o.UserLogout="USER_LOGOUT",o.UserExternalLogin="USER_EXTERNAL_LOGIN",o.UserExternalLogout="USER_EXTERNAL_LOGOUT",o.AllAuthenticatedUsers="USER_ACTIVE",o.AllInAuthenticatedUsers="USER_INACTIVE",o.MessageReceived="MSG_SEND",o.MessageHistory="MSG_FROM_USER",o.MessageDeliver="MSG_DELIVER",o))(n||{});function l(o,s,e){try{return JSON.stringify({id:o,type:s,payload:e})}catch(t){return console.error("Error serializing message:",t),""}}class A{socket;roomName;constructor(){this.socket=this.joinBuildWSClient()}sendSocketMessage(s){return new Promise((e,t)=>{if(this.socket&&this.socket.readyState===WebSocket.OPEN)try{this.socket.send(s),e(!0)}catch(r){console.error(r),t(new Error("Error sending message to server"))}else t(new Error("Socket is not open"))})}joinBuildWSClient(){const s=new WebSocket(`${E}://${p}`);return s.onopen=()=>{if(a.publish("connection",{connection:!0}),c.checkUser("user")){const e=c.getUser("user")?.login,t=c.getUser("user")?.password;e&&t&&this.login("id",e,t).catch(()=>{})}},s.onmessage=e=>{this.stateUpdater(e)},s.onclose=()=>{a.publish("error",{error:"Socket is closed. Reconnect will be attempted..."}),setTimeout(()=>{this.socket=this.joinBuildWSClient()},1e3)},s.onerror=e=>{console.error("ws connection error",e),s.close()},s}stateUpdater(s){try{const e=JSON.parse(s.data),{type:t}=e;if(t===n.UserLogin){const{isLogined:r,login:i}=e.payload.user;a.publish("userLoggedIn",{isLogined:r,login:i})}if(t===n.ERROR&&a.publish("error",{error:e.payload.error}),t===n.AllAuthenticatedUsers&&a.publish("usersActive",{users:e.payload.users}),t===n.AllInAuthenticatedUsers&&a.publish("usersInActive",{users:e.payload.users}),t===n.UserExternalLogin){const{isLogined:r,login:i}=e.payload.user;a.publish("userExternalLogin",{isLogined:r,login:i})}if(t===n.UserExternalLogout){const{isLogined:r,login:i}=e.payload.user;a.publish("userExternalLogout",{isLogined:r,login:i})}if(t===n.MessageReceived){const{text:r,to:i,from:d,datetime:g,status:h}=e.payload.message;a.publish("messageReceived",{text:r,from:d,to:i,datetime:g,status:h})}t===n.MessageHistory&&(console.log(e.payload.messages),a.publish("messageHistory",{messages:e.payload.messages}))}catch(e){console.error(e)}}login(s,e,t){const r=l(s,n.UserLogin,{user:{login:e,password:t}});return this.sendSocketMessage(r)}logout(s,e,t){const r=l(s,n.UserLogout,{user:{login:e,password:t}});return this.sendSocketMessage(r)}allActiveUsers(s){const e=l(s,n.AllAuthenticatedUsers,null);return this.sendSocketMessage(e)}allInActiveUsers(s){const e=l(s,n.AllInAuthenticatedUsers,null);return this.sendSocketMessage(e)}sendMsg(s,e,t){const r=l(s,n.MessageReceived,{message:{text:e,to:t}});return this.sendSocketMessage(r)}getHistoryMsg(s,e){const t=l(s,n.MessageHistory,{user:{login:e}});return this.sendSocketMessage(t)}}const u=new A;class R{login(s,e){u.login("222",s,e).catch(()=>{})}logout(s,e){u.logout("222",s,e).catch(()=>{})}allActiveUsers(){u.allActiveUsers("222").catch(()=>{})}allInActiveUsers(){u.allInActiveUsers("222").catch(()=>{})}reLogin=()=>{if(c.checkUser("user")){const s=c.getUser("user")?.login,e=c.getUser("user")?.password;s&&e&&(u.socket.onopen=()=>{this.login(s,e),this.allActiveUsers(),this.allInActiveUsers()})}}}const v=new R;class m extends U{constructor({type:s,className:e,name:t,placeholder:r,value:i,disabled:d,onInput:g}){super({tag:"input",className:e,type:s,placeholder:r,disabled:d}),t&&(this.node.name=t),i&&(this.node.value=i),g&&this.addListener("input",()=>g(this.getValue()))}getValue(){return this.node.value}setValue(s){this.node.value=s}}export{m as I,u as s,v as u};
